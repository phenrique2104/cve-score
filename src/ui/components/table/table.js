import "./table.style.css"
import Modal from 'react-modal';
import { useState } from "react";
import { ToastContainer, toast } from 'react-toastify';

export const Table = ({ dataTable }) => {
    const [modalIsOpen, setIsOpen] = useState(false);
    const [modalEditIsOpen, setModalEditIsOpen] = useState(false);
    const [summary, setSummary] = useState();
    const [tableScoreView, setTableScoreView] = useState(false);
    const [btnDisabled, setBtnDisabled] = useState(true);
    const [vector, setVector] = useState();
    const [base, setBase] = useState();
    const [temporal, setTemporal] = useState();
    const [environmental, setEnvoronmental] = useState();


    const customStyles = {
        content: {
            top: '50%',
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            marginRight: '-50%',
            width: '60%',
            transform: 'translate(-50%, -50%)',
        },
    };

    //Fecha modal.
    const closeModal = () => {
        setIsOpen(false);
        setModalEditIsOpen(false);
    }

    //Abre modal com notificações.
    const openModal = () => { setIsOpen(true); }

    const getScore = () => {
        var score;
        //using lib
        let cvss = require('cvss');
        
        if (vector) {
            score = cvss.getAll('CVSS:3.0/' + vector);
            setVector(null)
        } else {

            let str = dataTable['cvss3-vector'];
            //replace cvss 3.1 -> 3.0
            let newstr = str.replace(/3.1/i, '3.0');
            score = cvss.getAll(newstr);

        }

         //setting data
         setBase(score.base);
         setEnvoronmental(score.environmental);
         setTemporal(score.temporal);

        if (score.base.score === score.temporal.score || score.base.score === score.environmental.score) {
            toast.warn('Scores seems wrong - please edit the vector', {
                position: "top-right",
                autoClose: 5000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
            });
            setBtnDisabled(false)
        }else{
            toast.success('Vector Edited', {
                position: "top-right",
                autoClose: 5000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
            });
        }

        //enable view
        setTableScoreView(true)
    }

    const edit = () => {
        setModalEditIsOpen(true)
    }

    const saveEdit = () => {
        toast.warn('Trying calcule Vector', {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
        });
        getScore(vector);
        closeModal();
    }

    const setNewVectorValue = (changes) => {
        setVector(changes.target.value);
    }


    return (
        <>
            {dataTable ?
                <div className="data">
                    <span className="span-table">
                        <table className="data-table">
                            <caption className="caption">Overview</caption>
                            <tbody>
                                <tr>
                                    <th className="info">ID</th>
                                    <td className="details">{dataTable?.id}</td>
                                </tr>
                                <tr>
                                    <th className="info">Vector</th>
                                    <td className="details">{dataTable['cvss3-vector']}</td>
                                </tr>
                                <tr>
                                    <th className="info">CWE</th>
                                    <td className="details">{dataTable?.cwe}</td>
                                </tr>
                                <tr>
                                    <th className="info">Summary</th>
                                    <td className="details">{dataTable?.summary}</td>
                                </tr>
                                <tr>
                                    <th className="info">Modified</th>
                                    <td className="details">
                                        {dataTable?.Modified ?
                                            dataTable.Modified.replaceAll('-', '/').replace('T', " ") :
                                            "Modified not found"}
                                    </td>

                                </tr>
                                <tr>
                                    <th className="info">Access</th>
                                    <td className="details">Complexity: {dataTable?.access?.complexity} |
                                        Vector: {dataTable?.access?.vector} |
                                        Authentication: {dataTable?.access?.authentication}
                                    </td>
                                </tr>
                                <tr>
                                    <th className="info">Impact</th>
                                    <td className="details">
                                        Availability: {dataTable?.impact3?.availability} |
                                        Confidentiality: {dataTable?.impact3?.confidentiality} |
                                        Integrity: {dataTable?.impact3?.integrity}
                                    </td>
                                </tr>
                                <tr>
                                    <th className="info">Exploitability</th>
                                    <td className="details">Attack Vector: {dataTable?.exploitability3?.attackvector} |
                                        Attack Complexity: {dataTable?.exploitability3?.attackcomplexity} |
                                        Privileges Required: {dataTable?.exploitability3?.privilegesrequired} |
                                        User Interaction: {dataTable?.exploitability3?.userinteraction} |
                                        Scope: {dataTable?.exploitability3?.scope}
                                    </td>
                                </tr>
                            </tbody>

                        </table>
                    </span>
                    {dataTable.capec.length > 0 ?
                        <span className="span-table table-capec">
                            <table className="data-table">
                                <caption className="caption">Related Capec</caption>
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Severity</th>
                                        <th>Name</th>
                                        <th>Summary</th>

                                    </tr>

                                </thead>
                                <tbody>
                                    {dataTable.capec.length >= 1 ?


                                        <tr>
                                            <td>{dataTable.capec[dataTable.capec.length - 1]?.id}</td>
                                            <td>{dataTable.capec[dataTable.capec.length - 1]?.typical_severity}</td>
                                            <td>{dataTable.capec[dataTable.capec.length - 1]?.name}</td>
                                            <td>
                                                <button className="button btn-summary" onClick={() => {
                                                    setSummary(dataTable.capec[dataTable.capec.length - 1].summary)
                                                    openModal()
                                                }}
                                                >
                                                    click to view
                                                </button>
                                            </td>

                                        </tr>
                                        : ""
                                    }
                                    {
                                        dataTable.capec.length >= 2 ?
                                            <tr>
                                                <td>{dataTable.capec[dataTable.capec.length - 2]?.id}</td>
                                                <td>{dataTable.capec[dataTable.capec.length - 2]?.typical_severity}</td>
                                                <td>{dataTable.capec[dataTable.capec.length - 2]?.name}</td>
                                                <td>
                                                    <button className="button btn-summary" onClick={() => {
                                                        setSummary(dataTable.capec[dataTable.capec.length - 2].summary)
                                                        openModal()
                                                    }}
                                                    >
                                                        click to view
                                                    </button>
                                                </td>
                                            </tr> : ""

                                    }

                                    {
                                        dataTable.capec.length >= 3 ?
                                            <tr>
                                                <td>{dataTable.capec[dataTable.capec.length - 3]?.id}</td>
                                                <td>{dataTable.capec[dataTable.capec.length - 3]?.typical_severity}</td>
                                                <td>{dataTable.capec[dataTable.capec.length - 3]?.name}</td>
                                                <td>
                                                    <button className="button btn-summary" onClick={() => {
                                                        setSummary(dataTable.capec[dataTable.capec.length - 3].summary)
                                                        openModal()
                                                    }}
                                                    >
                                                        click to view
                                                    </button>
                                                </td>
                                            </tr>
                                            : ""
                                    }


                                </tbody>

                            </table>
                        </span> : ""}

                    {tableScoreView ?
                        <span className="span-table table-capec">
                            <table className="data-table">
                                <caption className="caption">CVSS Scores</caption>
                                <thead>
                                    <tr>
                                        <th>Base</th>
                                        <th>Temporal</th>
                                        <th>Environmental</th>

                                    </tr>

                                </thead>
                                <tbody>

                                    <tr>
                                        <td>Score: {base.score}</td>
                                        <td>Score: {temporal.score}</td>
                                        <td>Score: {environmental.score}</td>

                                    </tr>
                                    <tr>
                                        <td>Rating: {base.rating}</td>
                                        <td>Rating: {temporal.rating}</td>
                                        <td>Rating: {environmental.rating}</td>
                                    </tr>

                                </tbody>

                            </table>
                        </span>

                        :
                        ""

                    }

                    <Modal
                        isOpen={modalIsOpen}
                        onRequestClose={closeModal}
                        style={customStyles}
                        contentLabel="Example Modal"
                        ariaHideApp={false}
                    >
                        <button className="button" onClick={closeModal}>close</button>
                        <div>
                            {summary}
                        </div>

                    </Modal>
                    <div>
                        <button className="button btn-align" onClick={getScore}><span>GET SCORE</span></button>
                        <button disabled={btnDisabled} onClick={edit} className="button btn-align"><span>EDIT SCORE</span></button>
                    </div>

                   
                    <Modal
                        isOpen={modalEditIsOpen}
                        onRequestClose={closeModal}
                        style={customStyles}
                        contentLabel="Example Modal"
                        ariaHideApp={false}
                    >
                        <button className="button" onClick={closeModal}>close</button>
                        <div>
                            <div className="search-bar style-vector">
                                <input className="vector-input" type="text" placeholder="Vector" onChange={setNewVectorValue} />
                                <button className="button" onClick={saveEdit}>save</button>
                            </div>
                        </div>


                    </Modal>
                    <ToastContainer
                        position="top-right"
                        autoClose={5000}
                        hideProgressBar={false}
                        newestOnTop={false}
                        closeOnClick
                        rtl={false}
                        pauseOnFocusLoss
                        draggable
                        pauseOnHover
                    />
                </div>

                : ""}


        </>
    )
}



